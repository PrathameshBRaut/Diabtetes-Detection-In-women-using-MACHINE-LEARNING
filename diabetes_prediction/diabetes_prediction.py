# -*- coding: utf-8 -*-
"""diabetes_prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1AWqCWiPVvRemZ0Zp7OixEiKFI7KQrE6p

Importing the dependencies
"""

import numpy as np
import pandas as pd
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn import svm
from sklearn.metrics import accuracy_score

"""Data Collection and Analysis
PIMA Diabetes Dataset
"""

#loading the dataset to a pandas to a apandas data frame
diabetes_dataset = pd.read_csv('/content/diabetes.csv')

#printing the first five rows of the dadatset
diabetes_dataset.head()

"""Label 0 --> Non-Diabetic
Label 1 --> Diabetic
"""

diabetes_dataset.groupby('Outcome').mean()

# seperating data and labels 
x = diabetes_dataset.drop(columns='Outcome',axis=1)
y = diabetes_dataset['Outcome']

print (x)

print (y)

"""Data Standardization"""

scaler = StandardScaler() #scaler variable is used to call the function

scaler.fit(x) #here we fiited the x variable to standardized that dataset

standardized_data=scaler.transform(x) #here we collected all the standardized data

print (standardized_data)

x = standardized_data #putting standardized data into x variable
y = diabetes_dataset['Outcome']

print(x)
print(y)

"""TRAIN TEST SPLIT"""

x_train, x_test, y_train, y_test = train_test_split(x,y, test_size=0.2, stratify=y, random_state=2)

print(x.shape,x_train.shape,x_test.shape) #shows the split of data

"""TRAINING THE MODEL"""

classifier = svm.SVC(kernel='linear')

#training the support vector machine claasifier
classifier.fit(x_train , y_train) 
 #x_train includes data and y_train includes its results

"""Model Evaluation

Accuracy Score
"""

#accuracy score on the training data
x_train_prediction = classifier.predict(x_train)
training_data_accuracy = accuracy_score(x_train_prediction,y_train)
#x_train data_prediction will predict label for all x_train
#training_data_accuracy use accuracy_score function to predict the accuracy

print ('Accuracy score of the training data : ', training_data_accuracy)

#accuracy score on the test data
x_test_prediction = classifier.predict(x_test)
test_data_accuracy = accuracy_score(x_test_prediction,y_test)
#x_test data_prediction will predict label for all x_test
#test_data_accuracy use accuracy_score function to predict the accuracy
print ('Accuracy score of the test data : ', test_data_accuracy)

"""Making a predictive system """

input_data =(5,166,72,19,175,25.8,0.587,51)
#this data is any random data choosen from dataset
#changing input_data into numpy array
input_data_as_numpy_array = np.asarray(input_data)

#reshape the array as we are predicting the one instance  as w are going to check only for 1 input and not for all inputs present in array
input_data_reshaped = input_data_as_numpy_array.reshape(1,-1)

#now standardized the input_data
std_data = scaler.transform(input_data_reshaped)
print(std_data)
prediction = classifier.predict(std_data)
print(prediction)

if (prediction[0] == 0):
  print("The person is Not Diabetic")
else :
  print("The person is Diabetic")